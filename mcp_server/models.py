# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T00:43:35+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class AbuseReason(Enum):
    ACCOUNT_SUSPENSION_ABUSE_REASON_UNSPECIFIED = (
        'ACCOUNT_SUSPENSION_ABUSE_REASON_UNSPECIFIED'
    )
    TOS_VIOLATION = 'TOS_VIOLATION'
    SPAM = 'SPAM'
    PHISHING = 'PHISHING'
    TRAFFIC_PUMPING = 'TRAFFIC_PUMPING'
    FRAUD = 'FRAUD'
    NUMBER_HARVESTING = 'NUMBER_HARVESTING'
    PAYMENTS_FRAUD = 'PAYMENTS_FRAUD'
    UNWANTED_CONTENT = 'UNWANTED_CONTENT'


class AccountSuspensionDetails(BaseModel):
    abuseReason: Optional[AbuseReason] = Field(
        None,
        description='The reason why this account is receiving an account suspension warning.',
    )
    productName: Optional[str] = Field(
        None,
        description='The name of the product being abused. This is restricted to only the following values: "Gmail" "Google Workspace" "Payments" "Voice" "YouTube" "Other"',
    )


class State(Enum):
    ACCOUNT_SUSPENSION_WARNING_STATE_UNSPECIFIED = (
        'ACCOUNT_SUSPENSION_WARNING_STATE_UNSPECIFIED'
    )
    WARNING = 'WARNING'
    SUSPENDED = 'SUSPENDED'
    APPEAL_APPROVED = 'APPEAL_APPROVED'
    APPEAL_SUBMITTED = 'APPEAL_SUBMITTED'


class AccountSuspensionWarning(BaseModel):
    appealWindow: Optional[str] = Field(
        None,
        description='The amount of time remaining to appeal an imminent suspension. After this window has elapsed, the account will be suspended. Only populated if the account suspension is in WARNING state.',
    )
    state: Optional[State] = Field(
        None, description='Account suspension warning state.'
    )
    suspensionDetails: Optional[List[AccountSuspensionDetails]] = Field(
        None, description='Details about why an account is being suspended.'
    )


class ActionInfo(BaseModel):
    pass


class ActivityRule(BaseModel):
    actionNames: Optional[List[str]] = Field(
        None, description='List of action names associated with the rule threshold.'
    )
    createTime: Optional[str] = Field(None, description='Rule create timestamp.')
    description: Optional[str] = Field(None, description='Description of the rule.')
    displayName: Optional[str] = Field(None, description='Alert display name.')
    name: Optional[str] = Field(None, description='Rule name.')
    query: Optional[str] = Field(
        None,
        description='Query that is used to get the data from the associated source.',
    )
    supersededAlerts: Optional[List[str]] = Field(
        None,
        description='List of alert IDs superseded by this alert. It is used to indicate that this alert is essentially extension of superseded alerts and we found the relationship after creating these alerts.',
    )
    supersedingAlert: Optional[str] = Field(
        None,
        description='Alert ID superseding this alert. It is used to indicate that superseding alert is essentially extension of this alert and we found the relationship after creating both alerts.',
    )
    threshold: Optional[str] = Field(
        None, description='Alert threshold is for example “COUNT > 5”.'
    )
    triggerSource: Optional[str] = Field(
        None,
        description='The trigger sources for this rule. * GMAIL_EVENTS * DEVICE_EVENTS * USER_EVENTS',
    )
    updateTime: Optional[str] = Field(
        None, description='The timestamp of the last update to the rule.'
    )
    windowSize: Optional[str] = Field(
        None, description='Rule window size. Possible values are 1 hour or 24 hours.'
    )


class Type(Enum):
    ALERT_FEEDBACK_TYPE_UNSPECIFIED = 'ALERT_FEEDBACK_TYPE_UNSPECIFIED'
    NOT_USEFUL = 'NOT_USEFUL'
    SOMEWHAT_USEFUL = 'SOMEWHAT_USEFUL'
    VERY_USEFUL = 'VERY_USEFUL'


class AlertFeedback(BaseModel):
    alertId: Optional[str] = Field(
        None, description='Output only. The alert identifier.'
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time this feedback was created.'
    )
    customerId: Optional[str] = Field(
        None,
        description='Output only. The unique identifier of the Google Workspace account of the customer.',
    )
    email: Optional[str] = Field(
        None,
        description='Output only. The email of the user that provided the feedback.',
    )
    feedbackId: Optional[str] = Field(
        None, description='Output only. The unique identifier for the feedback.'
    )
    type: Optional[Type] = Field(
        None, description='Required. The type of the feedback.'
    )


class AlertMetadata(BaseModel):
    alertId: Optional[str] = Field(
        None, description='Output only. The alert identifier.'
    )
    assignee: Optional[str] = Field(
        None, description='The email address of the user assigned to the alert.'
    )
    customerId: Optional[str] = Field(
        None,
        description='Output only. The unique identifier of the Google Workspace account of the customer.',
    )
    etag: Optional[str] = Field(
        None,
        description='Optional. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of an alert metadata from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform metadata updates in order to avoid race conditions: An `etag` is returned in the response which contains alert metadata, and systems are expected to put that etag in the request to update alert metadata to ensure that their change will be applied to the same version of the alert metadata. If no `etag` is provided in the call to update alert metadata, then the existing alert metadata is overwritten blindly.',
    )
    severity: Optional[str] = Field(
        None,
        description="The severity value of the alert. Alert Center will set this field at alert creation time, default's to an empty string when it could not be determined. The supported values for update actions on this field are the following: * HIGH * MEDIUM * LOW",
    )
    status: Optional[str] = Field(
        None,
        description='The current status of the alert. The supported values are the following: * NOT_STARTED * IN_PROGRESS * CLOSED',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The time this metadata was last updated.'
    )


class ApnsCertificateExpirationInfo(BaseModel):
    appleId: Optional[str] = Field(
        None,
        description="The Apple ID used to create the certificate. It may be blank if admins didn't enter it.",
    )
    expirationTime: Optional[str] = Field(
        None, description='The expiration date of the APNS certificate.'
    )
    uid: Optional[str] = Field(None, description='The UID of the certificate.')


class AppSettingsChanged(BaseModel):
    alertDetails: Optional[str] = Field(
        None,
        description='Any other associated alert details, for example, AlertConfiguration.',
    )
    name: Optional[str] = Field(None, description='Rule name')


class Status(Enum):
    STATUS_UNSPECIFIED = 'STATUS_UNSPECIFIED'
    NEW = 'NEW'
    ONGOING = 'ONGOING'
    RESOLVED = 'RESOLVED'
    FALSE_POSITIVE = 'FALSE_POSITIVE'
    PARTIALLY_RESOLVED = 'PARTIALLY_RESOLVED'
    MERGED = 'MERGED'
    DOWNGRADED = 'DOWNGRADED'


class BatchDeleteAlertsRequest(BaseModel):
    alertId: Optional[List[str]] = Field(
        None, description='Required. The list of alert IDs to delete.'
    )
    customerId: Optional[str] = Field(
        None,
        description='Optional. The unique identifier of the Google Workspace account of the customer the alerts are associated with. The `customer_id` must have the initial "C" stripped (for example, `046psxkn`). Inferred from the caller identity if not provided. [Find your customer ID](https://support.google.com/cloudidentity/answer/10070793).',
    )


class BatchUndeleteAlertsRequest(BaseModel):
    alertId: Optional[List[str]] = Field(
        None, description='Required. The list of alert IDs to undelete.'
    )
    customerId: Optional[str] = Field(
        None,
        description='Optional. The unique identifier of the Google Workspace account of the customer the alerts are associated with. The `customer_id` must have the initial "C" stripped (for example, `046psxkn`). Inferred from the caller identity if not provided. [Find your customer ID](https://support.google.com/cloudidentity/answer/10070793).',
    )


class PayloadFormat(Enum):
    PAYLOAD_FORMAT_UNSPECIFIED = 'PAYLOAD_FORMAT_UNSPECIFIED'
    JSON = 'JSON'


class CloudPubsubTopic(BaseModel):
    payloadFormat: Optional[PayloadFormat] = Field(
        None,
        description='Optional. The format of the payload that would be sent. If not specified the format will be JSON.',
    )
    topicName: Optional[str] = Field(
        None,
        description='The `name` field of a Cloud Pubsub [Topic] (https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics#Topic).',
    )


class CsvRow(BaseModel):
    entries: Optional[List[str]] = Field(
        None,
        description='The data entries in a CSV file row, as a string array rather than a single comma-separated string.',
    )


class DeviceCompromisedSecurityDetail(BaseModel):
    deviceCompromisedState: Optional[str] = Field(
        None,
        description='The device compromised state. Possible values are "`Compromised`" or "`Not Compromised`".',
    )
    deviceId: Optional[str] = Field(None, description='Required. The device ID.')
    deviceModel: Optional[str] = Field(None, description='The model of the device.')
    deviceType: Optional[str] = Field(None, description='The type of the device.')
    iosVendorId: Optional[str] = Field(
        None, description='Required for iOS, empty for others.'
    )
    resourceId: Optional[str] = Field(None, description='The device resource ID.')
    serialNumber: Optional[str] = Field(
        None, description='The serial number of the device.'
    )


class DomainId(BaseModel):
    customerPrimaryDomain: Optional[str] = Field(
        None, description='The primary domain for the customer.'
    )


class DomainWideTakeoutInitiated(BaseModel):
    email: Optional[str] = Field(
        None, description='The email of the admin who initiated the takeout.'
    )
    takeoutRequestId: Optional[str] = Field(None, description='The takeout request ID.')


class Empty(BaseModel):
    pass


class GmailMessageInfo(BaseModel):
    attachmentsSha256Hash: Optional[List[str]] = Field(
        None, description="The `SHA256` hash of email's attachment and all MIME parts."
    )
    date: Optional[str] = Field(
        None, description='The date of the event related to this email.'
    )
    md5HashMessageBody: Optional[str] = Field(
        None, description='The hash of the message body text.'
    )
    md5HashSubject: Optional[str] = Field(
        None,
        description="The MD5 Hash of email's subject (only available for reported emails).",
    )
    messageBodySnippet: Optional[str] = Field(
        None,
        description='The snippet of the message body text (only available for reported emails).',
    )
    messageId: Optional[str] = Field(None, description='The message ID.')
    recipient: Optional[str] = Field(None, description='The recipient of this email.')
    sentTime: Optional[str] = Field(None, description='The sent time of the email.')
    subjectText: Optional[str] = Field(
        None, description='The email subject text (only available for reported emails).'
    )


class ListAlertFeedbackResponse(BaseModel):
    feedback: Optional[List[AlertFeedback]] = Field(
        None,
        description='The list of alert feedback. Feedback entries for each alert are ordered by creation time descending.',
    )


class LoginDetails(BaseModel):
    ipAddress: Optional[str] = Field(
        None,
        description='Optional. The human-readable IP address (for example, `11.22.33.44`) that is associated with the warning event.',
    )
    loginTime: Optional[str] = Field(
        None,
        description="Optional. The successful login time that is associated with the warning event. This isn't present for blocked login attempts.",
    )


class SystemActionType(Enum):
    SYSTEM_ACTION_TYPE_UNSPECIFIED = 'SYSTEM_ACTION_TYPE_UNSPECIFIED'
    NO_OPERATION = 'NO_OPERATION'
    REMOVED_FROM_INBOX = 'REMOVED_FROM_INBOX'


class MandatoryServiceAnnouncement(BaseModel):
    description: Optional[str] = Field(
        None, description='Detailed, freeform text describing the announcement'
    )
    title: Optional[str] = Field(
        None, description='One line summary of the announcement'
    )


class MergeInfo(BaseModel):
    newAlertId: Optional[str] = Field(
        None,
        description='Optional. New alert ID. Reference the [google.apps.alertcenter.Alert] with this ID for the current state.',
    )
    newIncidentTrackingId: Optional[str] = Field(
        None, description='The new tracking ID from the parent incident.'
    )


class Notification(BaseModel):
    cloudPubsubTopic: Optional[CloudPubsubTopic] = Field(
        None, description='A Google Cloud Pub/sub topic destination.'
    )


class PredefinedDetectorInfo(BaseModel):
    detectorName: Optional[str] = Field(
        None, description='Name that uniquely identifies the detector.'
    )


class PrimaryAdminChangedEvent(BaseModel):
    domain: Optional[str] = Field(None, description='domain in which actioned occurred')
    previousAdminEmail: Optional[str] = Field(
        None, description='Email of person who was the primary admin before the action'
    )
    updatedAdminEmail: Optional[str] = Field(
        None, description='Email of person who is the primary admin after the action'
    )


class ReportingRule(BaseModel):
    alertDetails: Optional[str] = Field(
        None,
        description='Any other associated alert details, for example, AlertConfiguration.',
    )
    name: Optional[str] = Field(None, description='Rule name')
    query: Optional[str] = Field(
        None,
        description='Alert Rule query Sample Query query { condition { filter { expected_application_id: 777491262838 expected_event_name: "indexable_content_change" filter_op: IN } } conjunction_operator: OR }',
    )


class RequestInfo(BaseModel):
    appDeveloperEmail: Optional[List[str]] = Field(
        None,
        description='List of app developers who triggered notifications for above application.',
    )
    appKey: Optional[str] = Field(
        None, description='Required. The application that requires the SQL setup.'
    )
    numberOfRequests: Optional[str] = Field(
        None,
        description='Required. Number of requests sent for this application to set up default SQL instance.',
    )


class ResourceInfo(BaseModel):
    documentId: Optional[str] = Field(None, description='Drive file ID.')
    resourceTitle: Optional[str] = Field(
        None,
        description='Title of the resource, for example email subject, or document title.',
    )


class RuleInfo(BaseModel):
    displayName: Optional[str] = Field(
        None, description='User provided name of the rule.'
    )
    resourceName: Optional[str] = Field(
        None, description='Resource name that uniquely identifies the rule.'
    )


class DataSource(Enum):
    DATA_SOURCE_UNSPECIFIED = 'DATA_SOURCE_UNSPECIFIED'
    DRIVE = 'DRIVE'


class SuppressedActionType(Enum):
    ACTION_TYPE_UNSPECIFIED = 'ACTION_TYPE_UNSPECIFIED'
    DRIVE_BLOCK_EXTERNAL_SHARING = 'DRIVE_BLOCK_EXTERNAL_SHARING'
    DRIVE_WARN_ON_EXTERNAL_SHARING = 'DRIVE_WARN_ON_EXTERNAL_SHARING'
    DELETE_WEBPROTECT_EVIDENCE = 'DELETE_WEBPROTECT_EVIDENCE'
    ALERT = 'ALERT'
    RULE_ACTIVATE = 'RULE_ACTIVATE'
    RULE_DEACTIVATE = 'RULE_DEACTIVATE'


class Trigger(Enum):
    TRIGGER_UNSPECIFIED = 'TRIGGER_UNSPECIFIED'
    DRIVE_SHARE = 'DRIVE_SHARE'


class TriggeredActionType(Enum):
    ACTION_TYPE_UNSPECIFIED = 'ACTION_TYPE_UNSPECIFIED'
    DRIVE_BLOCK_EXTERNAL_SHARING = 'DRIVE_BLOCK_EXTERNAL_SHARING'
    DRIVE_WARN_ON_EXTERNAL_SHARING = 'DRIVE_WARN_ON_EXTERNAL_SHARING'
    DELETE_WEBPROTECT_EVIDENCE = 'DELETE_WEBPROTECT_EVIDENCE'
    ALERT = 'ALERT'
    RULE_ACTIVATE = 'RULE_ACTIVATE'
    RULE_DEACTIVATE = 'RULE_DEACTIVATE'


class SSOProfileCreatedEvent(BaseModel):
    inboundSsoProfileName: Optional[str] = Field(
        None, description='sso profile name which got created'
    )


class SSOProfileDeletedEvent(BaseModel):
    inboundSsoProfileName: Optional[str] = Field(
        None, description='sso profile name which got deleted'
    )


class SSOProfileUpdatedEvent(BaseModel):
    inboundSsoProfileChanges: Optional[str] = Field(
        None, description='changes made to sso profile'
    )
    inboundSsoProfileName: Optional[str] = Field(
        None, description='sso profile name which got updated'
    )


class Settings(BaseModel):
    notifications: Optional[List[Notification]] = Field(
        None, description='The list of notifications.'
    )


class StateSponsoredAttack(BaseModel):
    email: Optional[str] = Field(
        None, description='The email of the user this incident was created for.'
    )


class StatusModel(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class SuperAdminPasswordResetEvent(BaseModel):
    userEmail: Optional[str] = Field(
        None, description='email of person whose password was reset'
    )


class SuspiciousActivitySecurityDetail(BaseModel):
    deviceId: Optional[str] = Field(None, description='Required. The device ID.')
    deviceModel: Optional[str] = Field(None, description='The model of the device.')
    deviceProperty: Optional[str] = Field(
        None, description='The device property which was changed.'
    )
    deviceType: Optional[str] = Field(None, description='The type of the device.')
    iosVendorId: Optional[str] = Field(
        None, description='Required for iOS, empty for others.'
    )
    newValue: Optional[str] = Field(
        None, description='The new value of the device property after the change.'
    )
    oldValue: Optional[str] = Field(
        None, description='The old value of the device property before the change.'
    )
    resourceId: Optional[str] = Field(None, description='The device resource ID.')
    serialNumber: Optional[str] = Field(
        None, description='The serial number of the device.'
    )


class EntityType(Enum):
    TRANSFER_ENTITY_TYPE_UNSPECIFIED = 'TRANSFER_ENTITY_TYPE_UNSPECIFIED'
    TRANSFER_AUTO_ATTENDANT = 'TRANSFER_AUTO_ATTENDANT'
    TRANSFER_RING_GROUP = 'TRANSFER_RING_GROUP'
    TRANSFER_USER = 'TRANSFER_USER'


class InvalidReason(Enum):
    TRANSFER_INVALID_REASON_UNSPECIFIED = 'TRANSFER_INVALID_REASON_UNSPECIFIED'
    TRANSFER_TARGET_DELETED = 'TRANSFER_TARGET_DELETED'
    UNLICENSED = 'UNLICENSED'
    SUSPENDED = 'SUSPENDED'
    NO_PHONE_NUMBER = 'NO_PHONE_NUMBER'


class TransferError(BaseModel):
    email: Optional[str] = Field(
        None,
        description="User's email address. This may be unavailable if the entity was deleted.",
    )
    entityType: Optional[EntityType] = Field(
        None,
        description='Type of entity being transferred to. For ring group members, this should always be USER.',
    )
    id: Optional[str] = Field(
        None, description='Ring group or auto attendant ID. Not set for users.'
    )
    invalidReason: Optional[InvalidReason] = Field(
        None, description='Reason for the error.'
    )
    name: Optional[str] = Field(
        None,
        description="User's full name, or the ring group / auto attendant name. This may be unavailable if the entity was deleted.",
    )


class TransferMisconfiguration(BaseModel):
    errors: Optional[List[TransferError]] = Field(
        None, description='Details for each invalid transfer or forward.'
    )


class UndeleteAlertRequest(BaseModel):
    customerId: Optional[str] = Field(
        None,
        description='Optional. The unique identifier of the Google Workspace account of the customer the alert is associated with. The `customer_id` must have the initial "C" stripped (for example, `046psxkn`). Inferred from the caller identity if not provided. [Find your customer ID](https://support.google.com/cloudidentity/answer/10070793).',
    )


class User(BaseModel):
    displayName: Optional[str] = Field(None, description='Display name of the user.')
    emailAddress: Optional[str] = Field(None, description='Email address of the user.')


class UserChanges(BaseModel):
    name: Optional[str] = Field(None, description='Rule name')


class UserDefinedDetectorInfo(BaseModel):
    displayName: Optional[str] = Field(
        None, description='Display name of the detector.'
    )
    resourceName: Optional[str] = Field(
        None, description='Resource name that uniquely identifies the detector.'
    )


class EntityType1(Enum):
    ENTITY_TYPE_UNSPECIFIED = 'ENTITY_TYPE_UNSPECIFIED'
    AUTO_ATTENDANT = 'AUTO_ATTENDANT'
    RING_GROUP = 'RING_GROUP'


class InvalidReason1(Enum):
    EMAIL_INVALID_REASON_UNSPECIFIED = 'EMAIL_INVALID_REASON_UNSPECIFIED'
    OUT_OF_QUOTA = 'OUT_OF_QUOTA'
    RECIPIENT_DELETED = 'RECIPIENT_DELETED'


class VoicemailRecipientError(BaseModel):
    email: Optional[str] = Field(
        None,
        description='Email address of the invalid recipient. This may be unavailable if the recipient was deleted.',
    )
    invalidReason: Optional[InvalidReason1] = Field(
        None, description='Reason for the error.'
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class AccountWarning(BaseModel):
    email: Optional[str] = Field(
        None, description='Required. The email of the user that this event belongs to.'
    )
    loginDetails: Optional[LoginDetails] = Field(
        None,
        description='Optional. Details of the login action associated with the warning event. This is only available for: * Suspicious login * Suspicious login (less secure app) * Suspicious programmatic login * User suspended (suspicious activity)',
    )


class Alert(BaseModel):
    alertId: Optional[str] = Field(
        None, description='Output only. The unique identifier for the alert.'
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time this alert was created.'
    )
    customerId: Optional[str] = Field(
        None,
        description='Output only. The unique identifier of the Google Workspace account of the customer.',
    )
    data: Optional[Dict[str, Any]] = Field(
        None,
        description='Optional. The data associated with this alert, for example google.apps.alertcenter.type.DeviceCompromised.',
    )
    deleted: Optional[bool] = Field(
        None, description='Output only. `True` if this alert is marked for deletion.'
    )
    endTime: Optional[str] = Field(
        None,
        description='Optional. The time the event that caused this alert ceased being active. If provided, the end time must not be earlier than the start time. If not provided, it indicates an ongoing alert.',
    )
    etag: Optional[str] = Field(
        None,
        description='Optional. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of an alert from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform alert updates in order to avoid race conditions: An `etag` is returned in the response which contains alerts, and systems are expected to put that etag in the request to update alert to ensure that their change will be applied to the same version of the alert. If no `etag` is provided in the call to update alert, then the existing alert is overwritten blindly.',
    )
    metadata: Optional[AlertMetadata] = Field(
        None, description='Output only. The metadata associated with this alert.'
    )
    securityInvestigationToolLink: Optional[str] = Field(
        None,
        description='Output only. An optional [Security Investigation Tool](https://support.google.com/a/answer/7575955) query for this alert.',
    )
    source: Optional[str] = Field(
        None,
        description='Required. A unique identifier for the system that reported the alert. This is output only after alert is created. Supported sources are any of the following: * Google Operations * Mobile device management * Gmail phishing * Data Loss Prevention * Domain wide takeout * State sponsored attack * Google identity * Apps outage',
    )
    startTime: Optional[str] = Field(
        None,
        description='Required. The time the event that caused this alert was started or detected.',
    )
    type: Optional[str] = Field(
        None,
        description='Required. The type of the alert. This is output only after alert is created. For a list of available alert types see [Google Workspace Alert types](https://developers.google.com/admin-sdk/alertcenter/reference/alert-types).',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The time this alert was last updated.'
    )


class AppMakerSqlSetupNotification(BaseModel):
    requestInfo: Optional[List[RequestInfo]] = Field(
        None, description='List of applications with requests for default SQL set up.'
    )


class AppsOutage(BaseModel):
    dashboardUri: Optional[str] = Field(
        None,
        description='Link to the outage event in Google Workspace Status Dashboard',
    )
    incidentTrackingId: Optional[str] = Field(None, description='Incident tracking ID.')
    mergeInfo: Optional[MergeInfo] = Field(
        None,
        description='Indicates new alert details under which the outage is communicated. Only populated when Status is MERGED.',
    )
    nextUpdateTime: Optional[str] = Field(
        None, description='Timestamp by which the next update is expected to arrive.'
    )
    products: Optional[List[str]] = Field(
        None, description='List of products impacted by the outage.'
    )
    resolutionTime: Optional[str] = Field(
        None,
        description='Timestamp when the outage is expected to be resolved, or has confirmed resolution. Provided only when known.',
    )
    status: Optional[Status] = Field(None, description='Current outage status.')


class BatchDeleteAlertsResponse(BaseModel):
    failedAlertStatus: Optional[Dict[str, StatusModel]] = Field(
        None, description='The status details for each failed `alert_id`.'
    )
    successAlertIds: Optional[List[str]] = Field(
        None, description='The successful list of alert IDs.'
    )


class BatchUndeleteAlertsResponse(BaseModel):
    failedAlertStatus: Optional[Dict[str, StatusModel]] = Field(
        None, description='The status details for each failed `alert_id`.'
    )
    successAlertIds: Optional[List[str]] = Field(
        None, description='The successful list of alert IDs.'
    )


class Csv(BaseModel):
    dataRows: Optional[List[CsvRow]] = Field(
        None,
        description='The list of data rows in a CSV file, as string arrays rather than as a single comma-separated string.',
    )
    headers: Optional[List[str]] = Field(
        None, description='The list of headers for data columns in a CSV file.'
    )


class DeviceCompromised(BaseModel):
    email: Optional[str] = Field(
        None, description='The email of the user this alert was created for.'
    )
    events: Optional[List[DeviceCompromisedSecurityDetail]] = Field(
        None, description='Required. The list of security events.'
    )


class ListAlertsResponse(BaseModel):
    alerts: Optional[List[Alert]] = Field(None, description='The list of alerts.')
    nextPageToken: Optional[str] = Field(
        None,
        description='The token for the next page. If not empty, indicates that there may be more alerts that match the listing request; this value can be used in a subsequent ListAlertsRequest to get alerts continuing from last result of the current list call.',
    )


class MaliciousEntity(BaseModel):
    displayName: Optional[str] = Field(
        None, description='The header from display name.'
    )
    entity: Optional[User] = Field(
        None, description='The actor who triggered a gmail phishing alert.'
    )
    fromHeader: Optional[str] = Field(None, description='The sender email address.')


class MatchInfo(BaseModel):
    predefinedDetector: Optional[PredefinedDetectorInfo] = Field(
        None, description='For matched detector predefined by Google.'
    )
    userDefinedDetector: Optional[UserDefinedDetectorInfo] = Field(
        None, description='For matched detector defined by administrators.'
    )


class PhishingSpike(BaseModel):
    domainId: Optional[DomainId] = Field(None, description='The domain ID.')
    isInternal: Optional[bool] = Field(
        None,
        description='If `true`, the email originated from within the organization.',
    )
    maliciousEntity: Optional[MaliciousEntity] = Field(
        None, description='The entity whose actions triggered a Gmail phishing alert.'
    )
    messages: Optional[List[GmailMessageInfo]] = Field(
        None, description='The list of messages contained by this alert.'
    )


class RuleViolationInfo(BaseModel):
    dataSource: Optional[DataSource] = Field(None, description='Source of the data.')
    matchInfo: Optional[List[MatchInfo]] = Field(
        None, description='List of matches that were found in the resource content.'
    )
    recipients: Optional[List[str]] = Field(
        None,
        description="Resource recipients. For Drive, they are grantees that the Drive file was shared with at the time of rule triggering. Valid values include user emails, group emails, domains, or 'anyone' if the file was publicly accessible. If the file was private the recipients list will be empty. For Gmail, they are emails of the users or groups that the Gmail message was sent to.",
    )
    resourceInfo: Optional[ResourceInfo] = Field(
        None, description='Details of the resource which violated the rule.'
    )
    ruleInfo: Optional[RuleInfo] = Field(
        None, description='Details of the violated rule.'
    )
    suppressedActionTypes: Optional[List[SuppressedActionType]] = Field(
        None,
        description='Actions suppressed due to other actions with higher priority.',
    )
    trigger: Optional[Trigger] = Field(None, description='Trigger of the rule.')
    triggeredActionInfo: Optional[List[ActionInfo]] = Field(
        None, description='Metadata related to the triggered actions.'
    )
    triggeredActionTypes: Optional[List[TriggeredActionType]] = Field(
        None,
        description='Actions applied as a consequence of the rule being triggered.',
    )
    triggeringUserEmail: Optional[str] = Field(
        None,
        description='Email of the user who caused the violation. Value could be empty if not applicable, for example, a violation found by drive continuous scan.',
    )


class SensitiveAdminAction(BaseModel):
    actorEmail: Optional[str] = Field(
        None, description='Email of person who performed the action'
    )
    eventTime: Optional[str] = Field(
        None, description='The time at which event occurred'
    )
    primaryAdminChangedEvent: Optional[PrimaryAdminChangedEvent] = Field(
        None,
        description="Event occurred when primary admin changed in customer's account",
    )
    ssoProfileCreatedEvent: Optional[SSOProfileCreatedEvent] = Field(
        None,
        description="Event occurred when SSO Profile created in customer's account",
    )
    ssoProfileDeletedEvent: Optional[SSOProfileDeletedEvent] = Field(
        None,
        description="Event occurred when SSO Profile deleted in customer's account",
    )
    ssoProfileUpdatedEvent: Optional[SSOProfileUpdatedEvent] = Field(
        None,
        description="Event occurred when SSO Profile updated in customer's account",
    )
    superAdminPasswordResetEvent: Optional[SuperAdminPasswordResetEvent] = Field(
        None,
        description="Event occurred when password was reset for super admin in customer's account",
    )


class SuspiciousActivity(BaseModel):
    email: Optional[str] = Field(
        None, description='The email of the user this alert was created for.'
    )
    events: Optional[List[SuspiciousActivitySecurityDetail]] = Field(
        None, description='Required. The list of security events.'
    )


class VoicemailMisconfiguration(BaseModel):
    errors: Optional[List[VoicemailRecipientError]] = Field(
        None, description='Issue(s) with voicemail recipients.'
    )


class Attachment(BaseModel):
    csv: Optional[Csv] = Field(None, description='A CSV file attachment.')


class BadWhitelist(BaseModel):
    domainId: Optional[DomainId] = Field(None, description='The domain ID.')
    maliciousEntity: Optional[MaliciousEntity] = Field(
        None, description='The entity whose actions triggered a Gmail phishing alert.'
    )
    messages: Optional[List[GmailMessageInfo]] = Field(
        None, description='The list of messages contained by this alert.'
    )
    sourceIp: Optional[str] = Field(
        None,
        description='The source IP address of the malicious email, for example, `127.0.0.1`.',
    )


class DlpRuleViolation(BaseModel):
    ruleViolationInfo: Optional[RuleViolationInfo] = Field(
        None,
        description='Details about the violated DLP rule. Admins can use the predefined detectors provided by Google Cloud DLP https://cloud.google.com/dlp/ when setting up a DLP rule. Matched Cloud DLP detectors in this violation if any will be captured in the MatchInfo.predefined_detector.',
    )


class GoogleOperations(BaseModel):
    affectedUserEmails: Optional[List[str]] = Field(
        None,
        description='The list of emails which correspond to the users directly affected by the incident.',
    )
    attachmentData: Optional[Attachment] = Field(
        None,
        description='Optional. Application-specific data for an incident, provided when the Google Workspace application which reported the incident cannot be completely restored to a valid state.',
    )
    description: Optional[str] = Field(
        None, description='A detailed, freeform incident description.'
    )
    domain: Optional[str] = Field(
        None, description='Customer domain for email template personalization.'
    )
    header: Optional[str] = Field(
        None,
        description='A header to display above the incident message. Typically used to attach a localized notice on the timeline for followup comms translations.',
    )
    title: Optional[str] = Field(None, description='A one-line incident description.')


class MailPhishing(BaseModel):
    domainId: Optional[DomainId] = Field(None, description='The domain ID.')
    isInternal: Optional[bool] = Field(
        None,
        description='If `true`, the email originated from within the organization.',
    )
    maliciousEntity: Optional[MaliciousEntity] = Field(
        None, description='The entity whose actions triggered a Gmail phishing alert.'
    )
    messages: Optional[List[GmailMessageInfo]] = Field(
        None, description='The list of messages contained by this alert.'
    )
    systemActionType: Optional[SystemActionType] = Field(
        None, description='System actions on the messages.'
    )


class VoiceMisconfiguration(BaseModel):
    entityName: Optional[str] = Field(
        None, description='Name of the entity whose configuration is now invalid.'
    )
    entityType: Optional[EntityType1] = Field(
        None, description='Type of the entity whose configuration is now invalid.'
    )
    fixUri: Optional[str] = Field(
        None, description='Link that the admin can follow to fix the issue.'
    )
    membersMisconfiguration: Optional[TransferMisconfiguration] = Field(
        None, description='Issue(s) with members of a ring group.'
    )
    transferMisconfiguration: Optional[TransferMisconfiguration] = Field(
        None,
        description='Issue(s) with transferring or forwarding to an external entity.',
    )
    voicemailMisconfiguration: Optional[VoicemailMisconfiguration] = Field(
        None, description='Issue(s) with sending to voicemail.'
    )
